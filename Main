package assignment3;

import java.util.*;
import java.io.*;

public class Main {
    static Set<String> isVisitied;
    static Set<String> dictionary;
    static List<Node> queue;
    public static void main(String[] args){
        Scanner keyboard=new Scanner(System.in);
        initialize();
        ArrayList<String> inputs=parse(keyboard);
        while (checkInput(inputs)){
            String start=inputs.get(0).toLowerCase();
            String end=inputs.get(1).toLowerCase();
            //
            //ArrayList<String> ladder=getWordLadderBFS(start,end);
            ArrayList<String> ladder=getWordLaddderDFS(start,end);
            //
            printLadder(ladder);
            inputs=parse(keyboard);
        }
    }
    public static void initialize(){
        isVisitied= new HashSet<>();
        queue=new LinkedList<>();
        dictionary=makeDictionary();
    }
    public static ArrayList<String> parse(Scanner keyboard){
        ArrayList<String> inputs=new ArrayList<>();
        inputs.add(keyboard.next());
        inputs.add(keyboard.next());
        return inputs;
    }
    public static ArrayList<String> getWordLaddderDFS(String start,String end){
        ArrayList<String> ladder=new ArrayList<>();
        isVisitied.removeAll(isVisitied);
        boolean found=recursionDFS(ladder,start,end);
        if(!found){
            ladder.add(start);
            ladder.add(end);
        }
        return ladder;
    }
    public static boolean recursionDFS(ArrayList<String> ladder,String start,String end){
        ladder.add(start);
        boolean finished=false;
        Iterator<String> it=dictionary.iterator();
        while (it.hasNext()&&!finished){
            String myIt=it.next();
            if(!isVisitied.contains(myIt)){
                int difference=0;
                int index=0;
                String s="";
                while(difference<2&&s.length()<myIt.length()){
                    s+=myIt.substring(index,index+1);
                    if(!(myIt.substring(index,index+1).equals(start.substring(index,index+1)))){
                        difference++;
                    }
                    index++;
                }
                if(difference<2) {
                    if(myIt.equals(end)){
                        ladder.add(end);
                        return true;
                    }
                    isVisitied.add(myIt);
                    finished=recursionDFS(ladder,myIt,end);
                }
            }
        }
        if(!finished){
            ladder.remove(start);
            return false;
        }
        else {
            return true;
        }
    }
    public static ArrayList<String> getWordLadderBFS(String start,String end){
        ArrayList<String> ladder=new ArrayList<>();
        isVisitied.removeAll(isVisitied);
        isVisitied.add(start);
        Node n=new Node(start,null);
        queue.add(n);
        n=recursionBFS(ladder,end);
        if(ladder.size()==0){
            ladder.add(end);
            ladder.add(start);
        }
        //System.out.println(ladder);
        ArrayList<String> reverse=new ArrayList<>();
        for(int index=ladder.size()-1;index>=0;index--){
            reverse.add(ladder.get(index));
        }
        queue.removeAll(queue);
        return reverse;
    }
    public static Node recursionBFS(ArrayList<String> ladder,String end){
        Node parent=queue.remove(0);
        for (String myIterator:dictionary) {
            int difference=0;
            int index=0;
            String s="";
            while(difference<2&&s.length()<myIterator.length()){
                s+=myIterator.substring(index,index+1);
                if(!(myIterator.substring(index,index+1).equals(parent.getWord().substring(index,index+1)))){
                    difference++;
                }
                index++;
            }
            if(difference<2) {
                if (!(isVisitied.contains(s))) {
                    Node child = new Node(myIterator, parent);
                    if (child.getWord().equals(end)) {
                        ladder.add(end);
                        //ladder.add(child.getWord());
                        return child.getParent();
                    }
                    isVisitied.add(child.getWord());
                    queue.add(child);
                }
            }
        }
        parent = null;
        if (!queue.isEmpty()) {
            parent = recursionBFS(ladder, end);
        }
        if (parent != null) {
            ladder.add(parent.getWord());
            return parent.getParent();
        }
        return null;
    }
    public static void printLadder(ArrayList<String> ladder){
        //a <N>-rung word ladder exists between <start> and <finish>.
        System.out.println("a <"+(ladder.size()-2)+">-rung word ladder exists between <"+ladder.get(0)+"> and <"+ladder.get(ladder.size()-1)+">.");
        for (String word :
                ladder) {
            System.out.println(word);
        }
        /*
        Iterator<String> word=ladder.iterator();
        while(word.hasNext()){
            System.out.println(word.next);
        }
         */
    }
    public static TreeSet<String> makeDictionary(){
        TreeSet<String> dict=new TreeSet<>();
        String fileName= "C:\\Users\\kolbe\\Downloads\\Semester3\\422c\\Project3\\src\\five_letter_words.txt";//five_letter_words.txt//C:\Users\kolbe\Downloads\Semester3\422c\Project3\src\five_letter_words.txt
        try{
            Scanner inFile=new Scanner(new File(fileName));
            while(inFile.hasNext()){
                dict.add(inFile.next().toLowerCase());
            }
        }catch (FileNotFoundException e){
            System.out.println("File '"+fileName+"' is missing or not found.");
            e.printStackTrace();
        }
        return dict;
    }
    public static boolean checkInput(ArrayList<String> inputs){
        if(inputs.size()>2) {
            System.out.println("size>2");
            return false;
        }
        for (String s : inputs) {
            if (s.equals("/quit")) {
                return false;
            }
            else if(!dictionary.contains(s)) {
                return false;
            }
        }
        return true;
    }
}
